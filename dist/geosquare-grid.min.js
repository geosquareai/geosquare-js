!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@turf/turf")):"function"==typeof define&&define.amd?define(["exports","@turf/turf"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).GeosquareGrid={},t.turf)}(this,(function(t,e){"use strict";function i(t){if(t&&t.__esModule)return t;var e=Object.create(null);return t&&Object.keys(t).forEach((function(i){if("default"!==i){var n=Object.getOwnPropertyDescriptor(t,i);Object.defineProperty(e,i,n.get?n:{enumerable:!0,get:function(){return t[i]}})}})),e.default=t,Object.freeze(e)}var n=i(e);const o=(t,e)=>{if("number"!=typeof t||"number"!=typeof e)throw new Error("Coordinates must be numbers");(t=>{if("number"!=typeof t||t<-180||t>180)throw new Error("Longitude must be a number between -180 and 180.")})(t),(t=>{if("number"!=typeof t||t<-90||t>90)throw new Error("Latitude must be a number between -90 and 90.")})(e)},r=t=>{if("string"!=typeof t)throw new Error("GID must be a string");if(!/^[2-9C-EF-GH-JL-MN-PQ-RT-VWXY]+$/.test(t))throw new Error("GID contains invalid characters");if(t.length<1||t.length>15)throw new Error("GID length must be between 1 and 15 characters")};class l{constructor(){this.longitude=null,this.latitude=null,this.level=null,this.gid=null,this.CODE_ALPHABET=[["2","3","4","5","6"],["7","8","9","C","E"],["F","G","H","J","L"],["M","N","P","Q","R"],["T","V","W","X","Y"]],this.CODE_ALPHABET_={5:this.CODE_ALPHABET.flat(),2:[...this.CODE_ALPHABET[0].slice(0,2),...this.CODE_ALPHABET[1].slice(0,2)],c2:["2","3"],c12:["V","X","N","M","F","R","P","W","H","G","Q","L","Y","T","J"]},this.CODE_ALPHABET_VALUE={},this.CODE_ALPHABET.forEach(((t,e)=>{t.forEach(((t,i)=>{this.CODE_ALPHABET_VALUE[t]=[e,i]}))})),this.CODE_ALPHABET_INDEX={};for(const[t,e]of Object.entries(this.CODE_ALPHABET_))this.CODE_ALPHABET_INDEX[t]={},e.forEach(((e,i)=>{this.CODE_ALPHABET_INDEX[t][e]=i}));this.d=[5,2,5,2,5,2,5,2,5,2,5,2,5,2,5],this.size_level={1e7:1,5e6:2,1e6:3,5e5:4,1e5:5,5e4:6,1e4:7,5e3:8,1e3:9,500:10,100:11,50:12,10:13,5:14,1:15}}lonlatToGID(t,e,i){if(o(t,e),i<1||i>15)throw new Error("Level must be between 1 and 15");let n=[-216,233.157642055036],r=[-217,232.157642055036],l="";for(let o=0;o<i;o++){const i=Math.floor((t-r[0])/(r[1]-r[0])*this.d[o]),s=Math.floor((e-n[0])/(n[1]-n[0])*this.d[o]),h=(r[1]-r[0])/this.d[o],u=(n[1]-n[0])/this.d[o],d=h*i,f=u*s;r=[r[0]+d,r[0]+d+h],n=[n[0]+f,n[0]+f+u],l+=this.CODE_ALPHABET[s][i]}return l}gidToLonlat(t){r(t);let e=[-216,233.157642055036],i=[-217,232.157642055036];for(let n=0;n<t.length;n++){const o=t[n],r=(i[1]-i[0])/this.d[n],l=(e[1]-e[0])/this.d[n],s=r*this.CODE_ALPHABET_VALUE[o][1],h=l*this.CODE_ALPHABET_VALUE[o][0];i=[i[0]+s,i[0]+s+r],e=[e[0]+h,e[0]+h+l]}return[(i[0]+i[1])/2,(e[0]+e[1])/2]}gidToBound(t){r(t);let e=[-216,233.157642055036],i=[-217,232.157642055036];for(let n=0;n<t.length;n++){const o=t[n],r=(i[1]-i[0])/this.d[n],l=(e[1]-e[0])/this.d[n],s=r*this.CODE_ALPHABET_VALUE[o][1],h=l*this.CODE_ALPHABET_VALUE[o][0];i=[i[0]+s,i[0]+s+r],e=[e[0]+h,e[0]+h+l]}return[i[0],e[0],i[1],e[1]]}fromLonlat(t,e,i){if(o(t,e),i<1||i>15)throw new Error("Level must be between 1 and 15");this.longitude=t,this.latitude=e,this.level=i,this.gid=this.lonlatToGID(this.longitude,this.latitude,this.level)}fromGid(t){r(t),this.gid=t,this.level=t.length,[this.longitude,this.latitude]=this.gidToLonlat(this.gid)}getGid(){if(null===this.gid){if(null===this.longitude||null===this.latitude||null===this.level)throw new Error("Cannot get GID without longitude, latitude, and level");this.gid=this.lonlatToGID(this.longitude,this.latitude,this.level)}return this.gid}getLonlat(){if(null===this.longitude||null===this.latitude){if(null===this.gid)throw new Error("Cannot get lon/lat without GID");[this.longitude,this.latitude]=this.gidToLonlat(this.gid)}return[this.longitude,this.latitude]}getBound(){return this.gidToBound(this.gid)}getGeometry(){return this.gidToGeometry(this.gid)}gidToGeometry(t){const e=this.gidToBound(t);return n.polygon([[[e[0],e[1]],[e[0],e[3]],[e[2],e[3]],[e[2],e[1]],[e[0],e[1]]]])}_areaRatio(t,e){const i=n.area(t),o=n.intersect(t,e);return o?parseFloat((n.area(o)/i).toFixed(20)):0}_toChildren(t){return this.CODE_ALPHABET_[this.d[t.length]].map((e=>t+e))}_toParent(t){return t.length>1?t.slice(0,-1):t}_getContainedKeys(t,e,i){let o=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];if("2"!==e&&!(t=n.intersect(t,this.gidToGeometry(e))))return[];const r=[],l=(e,n)=>{if(n)e.length>=i[0]&&e.length<=i[1]?r.push(e):this._toChildren(e).forEach((t=>{l(t,!0)}));else{const n=this.gidToGeometry(e),s=this._areaRatio(n,t);if(0===s){if(1===e.length){const t=e[e.length-1],i=this.CODE_ALPHABET_[this.d[0]].indexOf(t);if(i<25){const t=this.CODE_ALPHABET_[this.d[0]][i+1];l(e.slice(0,-1)+t,!1)}}return}if(1===s)l(e,!0);else if(e.length===i[1]&&o)r.push(e);else if(e.length===i[1]&&s>.5&&!o)r.push(e);else{if(e.length===i[1])return;this._toChildren(e).forEach((t=>{l(t,!1)}))}}};return l(e,!1),r}parrentToAllchildren(t,e){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;const n=this.size_level[e],o=t.length;if(n<o)throw new Error("Resolution must be less than or equal to the length of the GID");if(n===o)return[t];const r=[],l=[t];for(;l.length>0;){const t=l.shift();if(t.length===n)null!==i?this._areaRatio(this.gidToGeometry(t),i)>0&&r.push(t):r.push(t);else{if(t.length>n)break;this._toChildren(t).forEach((t=>{l.push(t)}))}}return r}polyfill(t,e){let i,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"2",o=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];if(Array.isArray(e)){if(e[0]<=e[1])throw new Error("Size must be in [min, max] format");if(!this.size_level[e[0]]||!this.size_level[e[1]])throw new Error(`Size must be one of: ${Object.keys(this.size_level).join(", ")}`);i=[this.size_level[e[0]],this.size_level[e[1]]]}else{if(!this.size_level[e])throw new Error(`Size must be one of: ${Object.keys(this.size_level).join(", ")}`);i=[this.size_level[e],this.size_level[e]]}return this._getContainedKeys(t,n,i,o)}}"undefined"!=typeof window&&(window.GeosquareGrid=l),t.GIDToLonlat=function(t){return(new l).gidToLonlat(t)},t.default=l,t.fromLonLat=function(t,e,i){const n=new l;return n.fromLonlat(t,e,i),n},t.getBounds=function(t){return(new l).gidToBound(t)},t.getGeometry=function(t){return(new l).gidToGeometry(t)},t.lonlatToGID=function(t,e,i){return(new l).lonlatToGID(t,e,i)},t.polyfill=function(t,e){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"2",n=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];return(new l).polyfill(t,e,i,n)},Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=geosquare-grid.min.js.map
